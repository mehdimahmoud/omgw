buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'docker'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'omgw'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	// hot swap with LiveReload for Dev Environment only
	compile("org.springframework.boot:spring-boot-devtools")
	// Rest API Client:
	compile('io.springfox:springfox-swagger-ui:2.6.1')
	compile('io.springfox:springfox-swagger2:2.6.1')
	// HTTP Metrics Endpoints:
	compile('org.springframework.boot:spring-boot-starter-actuator')
	// Security handler:
	compile('org.springframework.boot:spring-boot-starter-security')
	// Spring MVC (RestController + RestTemplate) + embedded servlet Tomcat
	compile('org.springframework.boot:spring-boot-starter-web')
	// Web libraries managed/packaged by WebJars into JAR
	compile('org.webjars:jquery:3.1.1')
	compile('org.webjars:angularjs:1.4.8')
	compile('org.webjars:bootstrap:3.3.7')
	compile('org.webjars:bootstrap-material-design:0.5.9')
	compile('org.webjars.bower:animate.css:3.5.2')
	compile('org.webjars.bower:ng-scrollbars:0.0.10')
//	compile('org.webjars.bower:angular:1.6.2')
//	compile('org.webjars.bower:angular-route:1.6.2')
//	compile('org.webjars.bower:angular-resource:1.6.2')

	// Test
	testCompile('org.springframework.boot:spring-boot-starter-test')
}


/* Useful to execute the first time for downloading and installing the appropriate Gradle distribution and
 runs the build against this downloaded distribution by ignoring if Gradle is pre-installed or not*/
task wrapper (type: Wrapper) {
	gradleVersion = '3.3'
}

// Necessary to add static resources automatically while any changes in Dev Environment
bootRun {
	addResources = true
}

task resolveAllDependencies {
	doLast {
		configurations.all { it.resolve() }
	}
}

group = "mmik"
task buildDocker (type: Docker, dependsOn: build) {
	push = false
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}
